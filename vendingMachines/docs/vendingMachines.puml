@startuml
abstract class Alert {
    +Alert(String message)
    +alertException()
}

class Drinks {
    -isAlcoholic: boolean
    -milliliters: int
    +Drinks(name: String, price: double, id: int, quantity: int, isAlcoholic: boolean, milliliters: int)
    +isAlcoholic(): boolean
}

class Food {
    +Food(name: String, price: double, id: int, quantity: int)
}

class Machine {
    -id: int
    -products: ArrayList<Product>
    -money: Money
    -status: Status
    +Machine(id: int)
    +getId(): int
    +setId(id: int)
    +getProducts(): ArrayList<Product>
    +setProducts(products: ArrayList<Product>)
    +getMoney(): Money
    +setMoney(money: Money)
    +getStatus(): Status
    +setStatus(status: Status)
    +machineReport()
    +manageChange(clientMoney: Money, productPrice: float): Money
    +possibleJam(): Status
    +possibleFailure(): Status
    +getProductPrice(id: int): float
    +productList()
    +buyProduct(clientMoney: Money, idProduct: int): Money
}

class Management {
    -machines: ArrayList<Machine>
    -incidences: ArrayList<Incidence>
    +Management()
    +screen(machine: int)
    +paymentManagement(machine: int, idProduct: int, clientMoney: Money)
}

class Money {
    -worth: ArrayList<Float>
    -quantity: ArrayList<Integer>
    +Money()
    +insert(w: float, q: int)
    +add(d: Money)
    +remove(d: Money): boolean
    +getWorth(): ArrayList<Float>
    +getQuantity(w: float): int
    +getTotal(): float
    +information()
}

abstract class Product {
    -name: String
    -price: double
    -id: int
    -quantity: int
    +Product(name: String, price: double, id: int, quantity: int)
    +getName(): String
    +setName(name: String)
    +getPrice(): double
    +setPrice(price: double)
    +getQuantity(i: int): int
    +setQuantity(i: int, quantity: int)
    +sell(i: int)
    +getId(): int
}

enum Status {
    JAM
    FAILURE
    END_STOCK
    NO_CHANGE
    NORMAL
}

interface Incidence {
    +setDate()
}

interface Salable {
    final float[] values
    +manageChange(money: Money, price: float): Money
    +possibleJam(): Status
    +possibleFailure(): Status
}

Alert <|-- FailureException
Alert <|-- JamException
Product <|-- Drinks
Product <|-- Food
Product <|-- Money
Salable <|.. Machine
Management o-- Machine
@enduml
@startuml
'https://plantuml.com/class-diagram

class Alive {
    - message: String
    + Alive(message: String)
    + Alive()
}

class CameOut

class Car {
    + Car()
    + succes(): Warning
    + setDescription()
}

abstract class Circumstances {
    - description: String
    + getDescription(): String
    + setDescription(description: String)
}

class Day {
    - day: int
    + nextDay()
    + getDay(): int
}

class Death {
    - message: String
    + Death(message: String)
    + Death()
}

abstract class Events {
    + Events(message: String)
}

class Fatigue {
    + Fatigue()
    + getSeverity(day: int): int
}

class Leaf {
    + Leaf()
    + succes(): Warning
    + setDescription()
}

class Rain {
    + Rain()
    + succes(): Warning
}

class Snail {
    - name: String
    - altitude: int
    - fatigue: Fatigue
    - state: State
    + Snail()
    + setAltitude(altitude: int)
    + getState(): State
    + setState(state: State)
    + fallInHole()
    + getAltitude(): int
    + rise()
    + drop()
}

enum State {
    ALIVE
    DEATH
}

class Tier {
    + Tier()
    + getValue(min: int, max: int): int
}

enum Warning {
    HEAVY_RAIN
    WEAK_RAIN
    NO_RAIN
    CAR_PASS
    CAR_NOT_PASS
    FALL_LEAF
    NO_FALL_LEAF
}

class Well {
    - snail: Snail
    - depth: int
    - waterDepth: int
    + getWaterDepth(): int
    + setWaterDepth(waterDepth: int)
    + survive()
}

class World {
    - well: Well
    - snail: Snail
    - rain: Rain
    - car: Car
    - leaf: Leaf
    + World()
    + check(): State
    + simulate()
    + printWell(warnings: ArrayList<Warning>)
}

Alive --|> Events
Car --|> Circumstances
Day -- World
Death --|> Events
Leaf --|> Circumstances
Rain -- World
Snail -- Fatigue
Snail -- State
Snail -- Tier
Well -- Snail
World -- Well
World -- Snail
World -- Rain
World -- Car
World -- Leaf

@enduml
@startuml

package Cashiers {
  abstract class Cashier {
    - numItemsProcessed: int
    - clientsServed: int
    - number: int
    - state: State
    - actualItems: int
    + Cashier(number: int)
    + getState(): State
    + setState(state: State): void
    + getNumItemsProcessed(): int
    + setNumItemsProcessed(numItemsProcessed: int): void
    + getClientsServed(): int
    + setClientsServed(clientsServed: int): void
    + getNumber(): int
    + setNumber(number: int): void
    + getActualItems(): int
    + setActualItems(actualItems: int): void
    + insertOrder(order: Order): void
    + processOrder(): void
  }

  class FastCashier {
    + FastCashier(number: int)
    + processOrder(): void
  }

  class NormalCashier {
    + NormalCashier(number: int)
  }

  enum State {
    OPEN
    CLOSED
    BUSY
  }
}

package Exceptions {
class OptionNotValidException {
    + OptionNotValidException()
  }
  class CloseCashierException {
    + CloseCashierException()
  }

  class OpenCashierException {
    + OpenCashierException()
  }
}

package Orders {
  interface Delivery {
    + isDelivery(): boolean
  }

  class Order {
    - numItems: int
    + Order()
    + getNumItems(): int
    + setNumItems(numItems: int): void
  }

  class DeliveryOrder {
    - isDelivery: boolean
    + DeliveryOrder()
    + isDelivery(): boolean
    + numberOfItems(): int
  }

  class NormalOrder {
    + NormalOrder()
    + NormalOrder(i: int)
    + numberOfItems(): int
  }
}
package Super{
class Supermarket {
  - cashiers: ArrayList<Cashier>
  - queue: Queue
  + Supermarket()
  + begin(): void
  + closedSupermarket(): void
  + openSupermarket(): void
  + getAnyOrder(): void
  + nextMinute(cashiers: ArrayList<Cashier>): void
  + summary(): void
  + addCashier(): void
  + closeCashier(): void
  + showCashiers(): void
  + simulateArrival(): void
  + simulateDay(): void
  + getCashiers(): ArrayList<Cashier>
}

class Queue {
  - queue: ArrayList<Order>
  + Queue()
  + getQueue(): ArrayList<Order>
  + setQueue(queue: ArrayList<Order>): void
  + addOrder(order: Order): void
  + removePerson(): void
  + getQueueSize(): int
}

class Menu {
  - options: ArrayList<String>
  + Menu()
  + addOption(option: String): void
  + showMenu(): void
  + selectOption(): int
}
}
class Main {
  + main(args: String[]): void
}

Menu--> OptionNotValidException: throws
Supermarket  ---->  OpenCashierException: throws
Supermarket  ---->  CloseCashierException: throws

Cashier <|-- FastCashier
Cashier <|-- NormalCashier
Cashier  *--  State: uses
Main --> Supermarket
Main --> Menu


Order <|-- DeliveryOrder
Order <|-- NormalOrder

Delivery <|.. DeliveryOrder
Queue  o-- Order
Supermarket  o---  Cashier
Supermarket  o-- Queue


@enduml